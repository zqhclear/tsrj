package org.tsrj.service.map.impl;

import com.alibaba.fastjson.JSONObject;
import org.apache.ibatis.annotations.ResultType;
import org.springframework.stereotype.Service;
import org.tsrj.common.amp.MapClient;
import org.tsrj.common.amp.MapConfig;
import org.tsrj.common.amp.MapUrlEnums;
import org.tsrj.common.amp.Md5ForAMap;
import org.tsrj.common.domain.ResultBody;
import org.tsrj.common.httpclient.HttpClientUtil;
import org.tsrj.common.httpclient.httpclient.builder.HCB;
import org.tsrj.common.httpclient.httpclient.common.HttpConfig;
import org.tsrj.common.utils.StringUtil;
import org.tsrj.service.map.MapService;
import org.tsrj.service.map.vo.GeocodeVO;
import sun.security.krb5.internal.PAData;

import java.util.Map;
import java.util.TreeMap;

/**
 * @Author: qh-zhong
 * @Date: 2018/5/8
 */
@Service
public class MapServiceImpl implements MapService {

    @Override
    public ResultBody getGeoCodeByAmap(GeocodeVO vo) throws Exception {
        ResultBody resultBody = new ResultBody();
        TreeMap<String, Object> paramsMap = new TreeMap<>();
        //地址,eg:同仁家园西区
        paramsMap.put("address", StringUtil.isEmpty(vo.getAddress()) ? "" : vo.getAddress());
        //所属城市，默认全国查找
        paramsMap.put("city", StringUtil.isEmpty(vo.getCity()) ? "" : vo.getCity());
        //对应开发者key
        paramsMap.put("key", MapConfig.KEY);
        String result = MapClient.buildRequest(paramsMap, MapUrlEnums.GEOCODE_GEO);
        resultBody.setData(JSONObject.toJSON(result));
        return resultBody;
    }

    @Override
    public ResultBody regeoCode() {
        ResultBody resultBody = new ResultBody();
        Map<String, Object> paramMap = new TreeMap<>();
        paramMap.put("key", MapConfig.KEY);
        /*经纬度坐标:必填
        传入内容规则：经度在前，纬度在后，经纬度间以“,”分割，经纬度小数点后不要超过 6 位。
        如果需要解析多个经纬度的话，请用"|"进行间隔，并且将 batch 参数设置为 true，
        最多支持传入 20 对坐标点。每对点坐标之间用"|"分割。
         */
        paramMap.put("location", "");
        /*
        以下内容需要 extensions 参数为 all 时才生效。逆地理编码在进行坐标解析之后不仅可以返回地址描述，
        也可以返回经纬度附近符合限定要求的POI内容（在 extensions 字段值为 all 时才会返回POI内容）。
        设置 POI 类型参数相当于为上述操作限定要求。参数仅支持传入POI TYPECODE，可以传入多个POI TYPECODE，
        相互之间用“|”分隔。该参数在 batch 取值为 true 时不生效。获取 POI TYPECODE 可以参考POI分类码表
         */
        paramMap.put("poitype", "");   //返回附近POI类型
        paramMap.put("radius", "");  //搜索半径
        /*返回结果控制
        extensions 参数默认取值是 base，也就是返回基本地址信息；
        extensions 参数取值为 all 时会返回基本地址信息、附近 POI 内容、道路信息以及道路交叉口信息。
         */
        paramMap.put("extensions", "");
        /*
        batch 参数设置为 true 时进行批量查询操作，最多支持 20 个经纬度点进行批量地址查询操作。
        batch 参数设置为 false 时进行单点查询，此时即使传入多个经纬度也只返回第一个经纬度的地址解析查询结果。
         */
        paramMap.put("batch","");
        /*
        以下内容需要 extensions 参数为 all 时才生效。
        可选值：0，1
        当roadlevel=0时，显示所有道路
        当roadlevel=1时，过滤非主干道路，仅输出主干道路数据
         */
        paramMap.put("roadlevel", "");
        paramMap.put("output", ""); //  返回数据格式，默认json
        paramMap.put("homeorcorp", ""); //是否优化POI返回顺序
        String result = MapClient.buildRequest(paramMap, MapUrlEnums.GEOCODE_REGEO);
        resultBody.setData(JSONObject.toJSON(result));
        return resultBody;
    }
}
